import React from 'react';
import { X, Calendar, Mail, Phone, User, BookOpen, Sun, Check, Ban } from 'lucide-react'; 

import { useScrollLock } from '../../hooks/useScrollLock';

import { StatusBadge } from '../common/StatusBadge'; 
import { RoleBadge } from '../common/RoleBadge'; ¬† ¬† 

interface UserDetail { 
    name: string; 
    contact: string; 
    phone: string; 
    role: string; 
    status: string; 
    isLocked: boolean; 
    details: { 
        hoTen: string; 
        gioiTinh: string; 
        ngaySinh: string; 
        tieuSu: string; 
        cungHoangDao: string; 
        conGiap: string; 
        nguHanh: string; 
        tongChiTieu: string; 
        soPhienThamGia: number; 
    }; 
} 

interface UserDetailModalProps { 
    user: UserDetail | null; 
    onClose: () => void; 
} 

interface DetailItemProps { 
    Icon?: React.FC<any>;  
    label: string;  
    value: string | number;  
    iconColor?: string;  
    emoji?: string; 
} 

const getNguHanhSymbol = (nguHanh: string): string => {
    switch (nguHanh) {
        case 'Kim': return '‚öôÔ∏è'; 
        case 'M·ªôc': return 'üå≥'; 
        case 'Th·ªßy': return 'üíß'; 
        case 'H·ªèa': return 'üî•'; 
        case 'Th·ªï': return '‚õ∞Ô∏è'; 
        default: return '‚ú®';
    }
};

const getConGiapSymbol = (conGiap: string): string => {
    switch (conGiap) {
        case 'T√Ω': return 'üêÄ';
        case 'S·ª≠u': return 'üêÇ';
        case 'D·∫ßn': return 'üêÖ';
        case 'M√£o': return 'üêá';
        case 'Th√¨n': return 'üêâ';
        case 'T·ªµ': return 'üêç';
        case 'Ng·ªç': return 'üêé';
        case 'M√πi': return 'üêè';
        case 'Th√¢n': return 'üêí';
        case 'D·∫≠u': return 'üêì';
        case 'Tu·∫•t': return 'üêï';
        case 'H·ª£i': return 'üêñ';
        default: return 'üí´';
    }
};

const getZodiacSymbol = (cungHoangDao: string): string => { 
    switch (cungHoangDao) { 
        case 'B·∫°ch D∆∞∆°ng': return '‚ôà'; 
        case 'Kim Ng∆∞u': return '‚ôâ'; 
        case 'Song T·ª≠': return '‚ôä'; 
        case 'C·ª± Gi·∫£i': return '‚ôã'; 
        case 'S∆∞ T·ª≠': return '‚ôå'; 
        case 'X·ª≠ N·ªØ': return '‚ôç'; 
        case 'Thi√™n B√¨nh': return '‚ôé'; 
        case 'Thi√™n Y·∫øt': return '‚ôè'; 
        case 'Nh√¢n M√£': return '‚ôê'; 
        case 'Ma K·∫øt': return '‚ôë'; 
        case 'B·∫£o B√¨nh': return '‚ôí'; 
        case 'Song Ng∆∞': return '‚ôì'; 
        default: return '‚ú®'; 
    } 
}; 

const DetailItem: React.FC<DetailItemProps> = ({ Icon, label, value, iconColor = 'text-gray-500', emoji }) => { 
    let IconElement; 
    if (emoji) { 
        IconElement = <span className={`text-xl font-bold mr-2 ${iconColor}`}>{emoji}</span>; 
    } else if (Icon) { 
        IconElement = <Icon className={`w-5 h-5 inline mr-2 ${iconColor}`} />; 
    } else { 
        IconElement = null; 
    } 

    return ( 
        <div className="flex flex-col"> 
            <span className="text-xs text-gray-500 dark:text-gray-400 mb-1">{label}</span> 
            <div className="flex items-center"> 
                {IconElement} 
                <span className="font-medium text-gray-900 dark:text-white">{value}</span> 
            </div> 
        </div> 
    ); 
}; 

export const UserDetailModal: React.FC<UserDetailModalProps> = ({ user, onClose }) => { 
    useScrollLock(!!user); 
    
    if (!user) return null; 

    const handleBackdropClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => { 
        if (event.target === event.currentTarget) { 
            onClose(); 
        } 
    }; 

    const isPending = user.status === 'Ch·ªù duy·ªát';
    const isCustomer = user.role === 'Kh√°ch h√†ng';

    const ActionIcon = user.isLocked ? Check : X; 
    
    // L·∫•y k√Ω hi·ªáu Unicode m·ªõi
    const zodiacSymbol = getZodiacSymbol(user.details.cungHoangDao); 
    const conGiapSymbol = getConGiapSymbol(user.details.conGiap);
    const nguHanhSymbol = getNguHanhSymbol(user.details.nguHanh);

    return ( 
        // S·ª≠ d·ª•ng fixed inset-0 ƒë·ªÉ t·∫°o l·ªõp ph·ªß 
        <div  
            className="fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-50 flex justify-end" 
            onClick={handleBackdropClick} 
        > 
            
            {/* Modal Drawer - S·ª≠ d·ª•ng flex-col v√† h-full ƒë·ªÉ b·ªë c·ª•c d·ªçc */} 
            <div  
                className="w-full max-w-sm h-full bg-white dark:bg-gray-800 shadow-2xl flex flex-col" 
                onClick={(e) => e.stopPropagation()}  
            > 
                
                {/* CONTENT CU·ªòN ƒê∆Ø·ª¢C (flex-grow) */} 
                <div className="flex-grow overflow-y-auto p-6 pb-20">  
                    
                    {/* Header */} 
                    <div className="flex justify-between items-start pb-4 border-b border-gray-200 dark:border-gray-700"> 
                        <div className="flex items-center space-x-3"> 
                            <img className="h-10 w-10 rounded-full" src="https://images.wallpapersden.com/image/download/satoru-gojo-acid-blue-eyes-jujutsu-kaisen_bmZpbWqUmZqaraWkpJRnZm1prWZmbW0.jpg" alt="Avatar" /> 
                            <div> 
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{user.name}</h3> 
                                <div className="flex space-x-2 mt-1"> 
                                    <StatusBadge status={user.isLocked ? 'ƒê√£ kh√≥a' : user.status} />  
                                    <RoleBadge role={user.role} /> 
                                </div> 
                            </div> 
                        </div> 
                        <button onClick={onClose} className="text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 p-1"> 
                            <X className="w-6 h-6" /> 
                        </button> 
                    </div> 

                    <h4 className="text-base font-semibold text-gray-900 dark:text-white mt-4 mb-3 border-b pb-2 dark:border-gray-700">Th√¥ng tin C√° nh√¢n</h4> 
                    <div className="grid grid-cols-2 gap-x-6 gap-y-4 text-sm text-gray-700 dark:text-gray-300"> 

                        <DetailItem Icon={User} label="H·ªç t√™n" value={user.details.hoTen} /> 
                        <DetailItem emoji="‚ôÄ" label="Gi·ªõi t√≠nh" value={user.details.gioiTinh} /> 
                        <DetailItem Icon={Mail} label="Email" value={user.contact} /> 
                        <DetailItem Icon={Phone} label="S·ªë ƒëi·ªán tho·∫°i" value={user.phone} /> 
                        <div className="flex flex-col col-span-2"> 
                            <DetailItem Icon={Calendar} label="Ng√†y sinh" value={user.details.ngaySinh} /> 
                        </div> 

                        <div className="col-span-2 mt-3"> 
                            <p className="text-xs text-gray-500 dark:text-gray-400 flex items-center mb-1"><BookOpen className="w-4 h-4 mr-1" /> Ti·ªÉu s·ª≠:</p> 
                            <p className="text-sm italic text-gray-800 dark:text-gray-200">{user.details.tieuSu}</p> 
                        </div> 
                    </div> 

                    <h4 className="text-base font-semibold text-gray-900 dark:text-white mt-6 mb-3 border-b pb-2 dark:border-gray-700">Th√¥ng tin {isCustomer ? 'Kh√°ch h√†ng' : 'Nh√† ti√™n tri'}</h4> 
                    <div className="grid grid-cols-2 gap-x-6 gap-y-4 text-sm text-gray-700 dark:text-gray-300"> 

                        <DetailItem 
                            emoji={zodiacSymbol} 
                            label="Cung Ho√†ng ƒê·∫°o" 
                            value={user.details.cungHoangDao} 
                            iconColor="text-yellow-500" 
                        /> 
                        <DetailItem 
                            emoji={conGiapSymbol} 
                            label="Con Gi√°p" 
                            value={user.details.conGiap} 
                            iconColor="text-yellow-500" 
                        /> 

                        <DetailItem 
                            emoji={nguHanhSymbol} 
                            label="Ng≈© h√†nh b·∫£n m·ªánh" 
                            value={user.details.nguHanh} 
                            iconColor="text-yellow-500" 
                        /> 
                        {isCustomer ? ( 
                            <> 
                                <DetailItem 
                                    emoji="‚Ç´" 
                                    label="T·ªïng chi ti√™u" 
                                    value={user.details.tongChiTieu} 
                                    iconColor="text-green-500" 
                                /> 
                                <DetailItem 
                                    emoji="üí¨" 
                                    label="S·ªë phi√™n tham gia" 
                                    value={user.details.soPhienThamGia} 
                                    iconColor="text-green-500" 
                                /> 
                            </> 
                        ) : (
                            // Hi·ªÉn th·ªã m·ªôt s·ªë th√¥ng tin ph·ª• cho Nh√† ti√™n tri n·∫øu c·∫ßn
                             <DetailItem 
                                Icon={Sun}
                                label="Th·ªùi gian ho·∫°t ƒë·ªông"
                                value="100 gi·ªù" // Gi√° tr·ªã gi·∫£ ƒë·ªãnh
                                iconColor="text-yellow-500"
                            />
                        )}
                    </div> 
                </div> {/* END: CONTENT CU·ªòN ƒê∆Ø·ª¢C */} 

                {/* Action Footer (C·ªê ƒê·ªäNH) - ƒê√É C·∫¨P NH·∫¨T LOGIC 2 N√öT */} 
                <div className="p-4 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800"> 
                    
                    {isPending && !isCustomer ? (
                        // TR·∫†NG TH√ÅI CH·ªú DUY·ªÜT (Ch·ªâ √°p d·ª•ng cho Nh√† ti√™n tri)
                        <div className="flex space-x-3">
                            {/* N√∫t DUY·ªÜT (Xanh) */}
                            <button className="flex-1 py-3 text-white font-semibold rounded-lg transition flex items-center justify-center space-x-2 bg-green-600 hover:bg-green-700">
                                <Check className="w-5 h-5" />
                                <span>Duy·ªát t√†i kho·∫£n</span>
                            </button>
                            {/* N√∫t T·ª™ CH·ªêI (ƒê·ªè) */}
                            <button className="flex-1 py-3 text-white font-semibold rounded-lg transition flex items-center justify-center space-x-2 bg-red-600 hover:bg-red-700">
                                <X className="w-5 h-5" />
                                <span>T·ª´ ch·ªëi</span>
                            </button>
                        </div>
                    ) : (
                        // TR·∫†NG TH√ÅI KH√ÅC (Ho·∫°t ƒë·ªông, ƒê√£ kh√≥a, Kh√°ch h√†ng)
                        <button 
                            className={`w-full py-3 text-white font-semibold rounded-lg transition flex items-center justify-center space-x-2 ${user.isLocked ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}`}
                        >
                            <ActionIcon className="w-5 h-5" />
                            <span>{user.isLocked ? 'M·ªü kh√≥a t√†i kho·∫£n' : 'Kh√≥a t√†i kho·∫£n'}</span>
                        </button>
                    )}
                </div> 
                
            </div> 
        </div> 
    ); 
};