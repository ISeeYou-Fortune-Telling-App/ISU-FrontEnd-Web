'use client';

import React from 'react';
import {
  Clock,
  ShieldAlert,
  ShieldCheck,
  CircleX,
  RefreshCcw,
  UserCog,
  User,
  UserCheck,
  UserMinus,
} from 'lucide-react';
import type { LucideIcon } from 'lucide-react';

export type BadgeType = 'AccountStatus' | 'AccountRole' | 'expertise' | 'post' | 'payment';
export type BadgeAccountStatus =
  | 'ƒêang ho·∫°t ƒë·ªông'
  | 'Ng·ª´ng ho·∫°t ƒë·ªông'
  | 'ƒê√£ duy·ªát'
  | 'Ch·ªù duy·ªát'
  | 'ƒê√£ kh√≥a'
  | 'ƒê√£ ho√†n ti·ªÅn'
  | 'B·ªã h·ªßy'
  | 'ƒê√£ x√°c nh·∫≠n'
  | 'Ch·ªù x√°c nh·∫≠n'
  | string;

export type BadgeAccountRole =
  | 'Nh√† ti√™n tri'
  | 'Nh√† ti√™n tri (ch∆∞a x√°c minh)'
  | 'Kh√°ch h√†ng'
  | 'Qu·∫£n tr·ªã vi√™n'
  | 'Kh√°ch v√£ng lai'
  | string;

/* üé® Style cho tr·∫°ng th√°i ti·∫øng Vi·ªát */
const getStatusStyle = (status: BadgeAccountStatus) => {
  let Icon: LucideIcon | null = null;
  let classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';

  switch (status) {
    case 'ƒêang ho·∫°t ƒë·ªông':
      classes = 'bg-green-100 text-green-700 dark:bg-green-800 dark:text-green-100';
      Icon = ShieldCheck;
      break;
    case 'Ng·ª´ng ho·∫°t ƒë·ªông':
      classes = 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
      Icon = ShieldAlert;
      break;
    case 'ƒê√£ duy·ªát':
      classes = 'bg-green-100 text-green-700 dark:bg-green-800 dark:text-green-100';
      Icon = ShieldCheck;
      break;
    case 'Ch·ªù duy·ªát':
    case 'Ch·ªù x√°c nh·∫≠n':
      classes = 'bg-yellow-100 text-yellow-700 dark:bg-yellow-800 dark:text-yellow-100';
      Icon = Clock;
      break;
    case 'ƒê√£ kh√≥a':
      classes = 'bg-red-100 text-red-700 dark:bg-red-800 dark:text-red-100';
      Icon = ShieldAlert;
      break;
    case 'ƒê√£ ho√†n ti·ªÅn':
      classes = 'bg-blue-100 text-blue-700 dark:bg-blue-800 dark:text-blue-100';
      Icon = RefreshCcw;
      break;
    case 'B·ªã h·ªßy':
      classes = 'bg-red-100 text-red-700 dark:bg-red-800 dark:text-red-100';
      Icon = CircleX;
      break;
    default:
      classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';
  }

  return { classes, Icon };
};

/* üëë Style cho vai tr√≤ ti·∫øng Vi·ªát */
const getRoleStyle = (role: BadgeAccountRole) => {
  let Icon: LucideIcon | null = null;
  let classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';

  switch (role) {
    case 'Qu·∫£n tr·ªã vi√™n':
      classes = 'bg-red-100 text-red-700 dark:bg-red-800 dark:text-red-100';
      Icon = UserCog;
      break;
    case 'Nh√† ti√™n tri':
      classes = 'bg-blue-100 text-blue-700 dark:bg-blue-800 dark:text-blue-100';
      Icon = UserCheck;
      break;
    case 'Nh√† ti√™n tri (ch∆∞a x√°c minh)':
      classes = 'bg-yellow-100 text-yellow-700 dark:bg-yellow-800 dark:text-yellow-100';
      Icon = Clock;
      break;
    case 'Kh√°ch h√†ng':
      classes = 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
      Icon = User;
      break;
    case 'Kh√°ch v√£ng lai':
      classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';
      Icon = UserMinus;
      break;
    default:
      classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';
  }

  return { classes, Icon };
};

/* üéØ Component ch√≠nh */
export const Badge: React.FC<{ type: BadgeType; value: string }> = ({ type, value }) => {
  const base =
    'px-3 py-1 text-xs font-semibold rounded-lg inline-flex items-center space-x-1 border border-current';
  let Icon: LucideIcon | null = null;
  let classes = '';

  if (type === 'AccountStatus') {
    const style = getStatusStyle(value as BadgeAccountStatus);
    Icon = style.Icon;
    classes = style.classes;
  } else if (type === 'AccountRole') {
    const style = getRoleStyle(value as BadgeAccountRole);
    Icon = style.Icon;
    classes = style.classes;
  } else {
    classes = 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-100';
  }

  return (
    <span className={`${base} ${classes}`}>
      {Icon && <Icon className="w-3.5 h-3.5 mr-1" />}
      <span>{value}</span>
    </span>
  );
};
