import { apiFetch } from '../api'; 

interface LoginPayload {
  email: string;
  password: string;
}

interface APIResponse<T> {
    statusCode: number;
    message: string;
    data: T; // T l√† ki·ªÉu d·ªØ li·ªáu c·ª• th·ªÉ (·ªü ƒë√¢y l√† LoginData)
}

interface LoginData {
  token: string;
  refreshToken: string;
  userId: string;
  role: string;
}

const setAuthData = (data: LoginData) => {
  if (data.role !== 'ADMIN') {
    throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o h·ªá th·ªëng Admin.');
  }

  localStorage.setItem('accessToken', data.token);
  localStorage.setItem('refreshToken', data.refreshToken);
  localStorage.setItem('userId', data.userId);
  localStorage.setItem('userRole', data.role);
};

export const login = async (data: LoginPayload): Promise<LoginData> => {
    console.log("Full Login URL:", process.env.NEXT_PUBLIC_API_URL + '/auth/login');
    
    // üö® S·ª¨A L·ªñI 2: apiFetch gi·ªù ƒë√¢y tr·∫£ v·ªÅ APIResponse<LoginData>
    const apiResponse = await apiFetch<APIResponse<LoginData>>('/auth/login', { 
        method: 'POST',
        data,
    });

    // L·∫•y object data th·ª±c t·∫ø ƒë·ªÉ x·ª≠ l√Ω
    const loginData = apiResponse.data;

    setAuthData(loginData);
    
    // Tr·∫£ v·ªÅ loginData (ch·ª© kh√¥ng ph·∫£i to√†n b·ªô apiResponse)
    return loginData; 
};

export const logout = () => {
  // üî• X√≥a to√†n b·ªô th√¥ng tin x√°c th·ª±c
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
  localStorage.removeItem('userId');
  localStorage.removeItem('userRole');

  // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
  if (typeof window !== 'undefined') {
    window.location.href = '/login';
  }
};

